<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;

class Application extends Model implements HasMedia
{
    use InteractsWithMedia;

    protected $fillable = [
        'slug',
        'name',
        'email',
        'whatsapp_number',
        'invoice_logo'
    ];

    protected function casts(): array
    {
        return [
            'slug' => 'string'
        ];
    }

    protected static function boot(): void
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function (Application $application) {
            $application->slug = Str::uuid()->toString();
        });

        static::updating(function (Application $application) {
            if ($application->isDirty('invoice_logo')) {
                $oldLogo = $application->getOriginal('invoice_logo');
                if ($oldLogo && Storage::disk('public')->exists($oldLogo)) {
                    Storage::disk('public')->delete($oldLogo);
                }
            }
        });
    }

    // TODO More fields can be added as needed
    protected function logo(): Attribute
    {
        return Attribute::make(fn() => $this->hasMedia('logo') ? $this->getFirstMediaUrl('logo') : url('https://ui-avatars.com/api/?name=' . urlencode($this->name) . '&size=128&background=00bb00&color=ffffff&rounded=true'));
    }

    protected function favicon(): Attribute
    {
        return Attribute::make(fn() => $this->hasMedia('favicon') ? $this->getFirstMediaUrl('favicon') : url('https://ui-avatars.com/api/?name=' . urlencode($this->name) . '&size=64&background=00bb00&color=ffffff&rounded=true'));
    }

    protected function invoiceLogoAsset(): Attribute
    {
        return Attribute::make(fn() => $this->invoice_logo ? Storage::disk('public')->url($this->invoice_logo) : url('https://ui-avatars.com/api/?name=' . urlencode($this->name) . '&size=128&background=00bb00&color=ffffff&rounded=true'));
    }

    public function getRouteKeyName(): string
    {
        return 'slug';
    }
}
