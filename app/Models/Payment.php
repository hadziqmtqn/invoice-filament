<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Str;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;

class Payment extends Model implements HasMedia
{
    use SoftDeletes, InteractsWithMedia;

    protected $fillable = [
        'slug',
        'user_id',
        'serial_number',
        'reference_number',
        'date',
        'amount',
        'midtrans_snap_token',
        'payment_source',
        'payment_method',
        'bank_account_id',
        'payment_channel',
        'payment_validation_status',
        'payment_validation_note',
        'transaction_time',
        'status',
        'note',
    ];

    protected function casts(): array
    {
        return [
            'slug' => 'string',
            'date' => 'date',
            'transaction_time' => 'timestamp'
        ];
    }

    protected static function boot(): void
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function (Payment $payment) {
            $payment->slug = Str::uuid()->toString();
            $payment->serial_number = self::max('serial_number') + 1;
            $payment->reference_number = strtoupper('REF' . Str::random(6) . Str::padLeft($payment->serial_number, 6, '0'));
        });
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function bankAccount(): BelongsTo
    {
        return $this->belongsTo(BankAccount::class);
    }

    public function invoicePayments(): HasMany
    {
        return $this->hasMany(InvoicePayment::class, 'payment_id');
    }

    // more
    public function getRouteKeyName(): string
    {
        return 'slug';
    }

    protected function totalBill(): Attribute
    {
        return Attribute::make(fn() => $this->invoicePayments->sum(function ($invoicePayment) {
            return $invoicePayment->invoice?->invoiceItems->sum(function ($item) {
                return $item->rate * $item->qty;
            });
        }));
    }

    protected function paymentAttachment(): Attribute
    {
        $hasMedia = $this->hasMedia('payment_attachments');
        if (! $hasMedia) {
            $data = [
                'fileUri' => null,
                'mimeType' => null,
                'originalName' => null,
            ];
        }else {
            $media = $this->getFirstMedia('payment_attachments');
            $data = [
                'fileUri' => $media->getTemporaryUrl(now()->addDay()),
                'mimeType' => $media->mime_type,
                'originalName' => $media->file_name,
            ];
        }

        return Attribute::make(
            get: fn() => json_encode($data)
        );
    }
}
