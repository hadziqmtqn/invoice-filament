<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Support\Str;
use Spatie\MediaLibrary\HasMedia;
use Spatie\MediaLibrary\InteractsWithMedia;

class Invoice extends Model implements HasMedia
{
    use InteractsWithMedia;

    protected $fillable = [
        'slug',
        'invoice_number',
        'serial_number',
        'code',
        'user_id',
        'date',
        'due_date',
        'discount',
        'note',
        'status',
    ];

    protected function casts(): array
    {
        return [
            'slug' => 'string',
            'date' => 'date',
            'due_date' => 'date',
        ];
    }

    protected static function boot(): void
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function (Invoice $invoice) {
            $invoice->slug = Str::uuid()->toString();
            $invoice->invoice_number = now()->timestamp;
            $invoice->serial_number = self::max('serial_number') + 1;
            $invoice->code = 'INV' . Str::padLeft($invoice->serial_number, 6, '0');
        });
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function invoiceItems(): HasMany
    {
        return $this->hasMany(InvoiceItem::class, 'invoice_id');
    }

    // More
    public function getRouteKeyName(): string
    {
        return 'slug';
    }

    protected function totalPrice(): Attribute
    {
        $discount = $this->discount ?? 0;
        $total = $this->invoiceItems->sum(function ($item) {
            return $item->rate * $item->qty;
        });

        $totalAfterDiscount = $total - ($total * ($discount / 100));

        return Attribute::make(fn() => $totalAfterDiscount);
    }
}
