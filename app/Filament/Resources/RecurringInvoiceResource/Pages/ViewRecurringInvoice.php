<?php

namespace App\Filament\Resources\RecurringInvoiceResource\Pages;

use App\Enums\RecurrenceFrequency;
use App\Filament\Resources\RecurringInvoiceResource;
use App\Filament\Resources\UserResource;
use App\Models\RecurringInvoice;
use Filament\Infolists\Components\Group;
use Filament\Infolists\Components\RepeatableEntry;
use Filament\Infolists\Components\Section;
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;
use Filament\Resources\Pages\ViewRecord;
use Filament\Support\Enums\FontWeight;

class ViewRecurringInvoice extends ViewRecord
{
    protected static string $resource = RecurringInvoiceResource::class;
    protected static ?string $title = 'Detail';

    public function infolist(Infolist $infolist): Infolist
    {
        parent::infolist($infolist); // TODO: Change the autogenerated stub

        return $infolist
            ->columns(3)
            ->schema([
            Group::make()
                ->schema([
                    Section::make('Invoice To')
                        ->columns()
                        ->schema([
                            TextEntry::make('code')
                                ->inlineLabel()
                                ->prefix('#')
                                ->weight(FontWeight::Bold),
                            TextEntry::make('user.name')
                                ->label('Customer Name')
                                ->inlineLabel()
                                ->url(fn(RecurringInvoice $record): string => UserResource::getUrl('edit', ['record' => $record->user?->username]))
                                ->color('primary')
                                ->weight(FontWeight::Bold),

                            TextEntry::make('user.userProfile.phone')
                                ->label('Phone')
                                ->inlineLabel()
                                ->weight(FontWeight::Bold),

                            TextEntry::make('user.userProfile.company_name')
                                ->label('Company')
                                ->inlineLabel()
                                ->weight(FontWeight::Bold),
                        ]),

                    Section::make('Bill To')
                        ->columns()
                        ->schema([
                            TextEntry::make('title')
                                ->hiddenLabel()
                                ->weight(FontWeight::Bold)
                                ->columnSpanFull(),

                            TextEntry::make('date')
                                ->label('Date')
                                ->icon('heroicon-o-calendar')
                                ->date('d M Y H:i')
                                ->inlineLabel(),

                            TextEntry::make('due_date')
                                ->label('Due Date')
                                ->icon('heroicon-o-calendar')
                                ->date('d M Y H:i')
                                ->inlineLabel()
                                ->color('danger'),

                            TextEntry::make('recurrence_frequency')
                                ->label('Rpt. Frequency')
                                ->icon('heroicon-o-clock')
                                ->formatStateUsing(fn($state, RecurringInvoice $record) => $record->repeat_every . ' ' . RecurrenceFrequency::tryFrom($state)?->getLabel() ?? 'N/A')
                                ->inlineLabel(),

                            TextEntry::make('next_invoice_date')
                                ->label('Next Inv. Date')
                                ->icon('heroicon-o-calendar')
                                ->date('d M Y H:i')
                                ->inlineLabel(),
                        ]),

                    Section::make('Line Items')
                        ->schema([
                            RepeatableEntry::make('lineItems')
                                ->hiddenLabel()
                                ->columns()
                                ->schema([
                                    TextEntry::make('item.name'),
                                    TextEntry::make('qty')
                                ])
                        ]),
                ])
                ->columnSpan(['lg' => 2]),

            Group::make()
                ->schema([
                    Section::make('Status')
                        ->schema([

                        ])
                ])
                ->columnSpan(['lg' => 1]),
        ]);
    }
}
