<?php

namespace App\Filament\Resources\InvoiceResource\Pages;

use App\Filament\Resources\InvoiceResource;
use App\Filament\Resources\UserResource;
use App\Jobs\UnpaidBillMessageJob;
use App\Models\Invoice;
use Filament\Infolists\Components\Actions;
use Filament\Infolists\Components\Group;
use Filament\Infolists\Components\RepeatableEntry;
use Filament\Infolists\Components\Section;
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\ViewRecord;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\HtmlString;

class ViewInvoice extends ViewRecord
{
    protected static string $resource = InvoiceResource::class;

    public function infolist(Infolist $infolist): Infolist
    {
        parent::infolist($infolist); // TODO: Change the autogenerated stub

        return $infolist
            ->schema([
                Group::make()
                    ->schema([
                        Section::make()
                            ->schema([
                                TextEntry::make('code')
                                    ->label('Invoice Code')
                                    ->color('primary'),

                                TextEntry::make('title')
                                    ->label('Title'),

                                TextEntry::make('user.name')
                                    ->label('User')
                                    ->url(fn(Invoice $record): string => UserResource::getUrl('edit', ['record' => $record->user?->username]))
                                    ->color('primary'),

                                TextEntry::make('date')
                                    ->label('Date')
                                    ->date('d M Y'),

                                TextEntry::make('due_date')
                                    ->label('Due Date')
                                    ->date('d M Y'),
                            ]),
                    ])
                    ->inlineLabel()
                    ->columnSpan(['lg' => 2]),

                Group::make()
                    ->schema([
                        TextEntry::make('status')
                            ->color(fn(string $state): string => match ($state) {
                                'draft' => 'gray',
                                'sent' => 'primary',
                                'paid' => 'success',
                                'unpaid', 'overdue' => 'danger',
                                'partially_paid' => 'warning',
                                default => 'secondary',
                            })
                            ->formatStateUsing(fn(string $state): HtmlString => new HtmlString('<span class="text-xl font-semibold">' . str_replace('_', ' ', strtoupper($state)) . '</span>')),

                        Actions::make([
                            Actions\Action::make('send_invoice')
                                ->label('Send Invoice')
                                ->icon('heroicon-o-paper-airplane')
                                ->color('primary')
                                ->action(function (Invoice $record) {
                                    Log::info('Sending invoice for record: ' . $record->code);
                                    if ($record->status === 'draft' || $record->status === 'sent') {
                                        UnpaidBillMessageJob::dispatch([
                                            'user_name' => $record->user?->name ?? 'Unknown User',
                                            'invoice_name' => $record->title,
                                            'amount' => 'Rp' . number_format($record->total_price,0,',','.'),
                                            'due_date' => $record->due_date?->format('d M Y') ?? now()->format('d M Y'),
                                            'whatsapp_number' => $record->user?->userProfile?->phone ?? '',
                                            'invoice_id' => $record->id,
                                        ]);

                                        Notification::make()
                                            ->success()
                                            ->title('Invoice Sent')
                                            ->body('The invoice has been sent successfully.')
                                            ->send();

                                        Notification::make()
                                            ->success()
                                            ->title('New Invoice Sent')
                                            ->body('You have a new bill with a billing number: ' . $record->code)
                                            ->sendToDatabase($record->user);
                                    }
                                })
                                ->visible(fn(Invoice $record): bool => !auth()->user()->hasRole('user') && ($record->status === 'draft' || $record->status === 'sent' || $record->status === 'partially_paid')),

                            Actions\Action::make('edit')
                                ->label('Edit Invoice')
                                ->icon('heroicon-o-pencil-square')
                                ->color('warning')
                                ->outlined()
                                ->url(fn(Invoice $record): string => InvoiceResource::getUrl('edit', ['record' => $record->slug]))
                                ->visible(fn(Invoice $record): bool => auth()->user()->can('update_invoice') && $record->status !== 'paid'),
                        ]),
                    ])
                    ->columnSpan(['lg' => 1]),

                Section::make('Invoice Items')
                    ->schema([
                        RepeatableEntry::make('invoiceItems')
                            ->hiddenLabel()
                            ->schema([
                                TextEntry::make('item.name')
                                    ->label('Item Name')
                                    ->weight('bold')
                                    ->inlineLabel(),
                                TextEntry::make('qty')
                                    ->label('Quantity')
                                    ->weight('bold')
                                    ->inlineLabel(),
                                TextEntry::make('unit')
                                    ->label('Unit')
                                    ->weight('bold')
                                    ->inlineLabel(),
                                TextEntry::make('rate')
                                    ->label('Rate')
                                    ->weight('bold')
                                    ->money('idr')
                                    ->inlineLabel(),
                                TextEntry::make('note')
                                    ->label('Note')
                                    ->weight('bold')
                                    ->inlineLabel(),
                            ])
                            ->columns(),
                    ]),
            ])
            ->columns(3);
    }
}
